#!/bin/bash

echo "*****************************************"
echo "*        09_6_frontend_discovery        *"
echo "*****************************************"

# Nombre del directorio del frontend
FRONTEND_DIR="/opt/shelly_monitoring/frontend"

cd "$FRONTEND_DIR"

# Crear el archivo src/pages/Settings.tsx
cat <<EOL > src/pages/Settings.tsx
import React, { useState, useEffect, useRef } from 'react';
import { startDiscovery } from '../services/api';
import { createSSEConnection } from '../services/sse';
import { TextField, Button, Box, Typography, LinearProgress } from '@mui/material';
import { Terminal } from 'xterm';
import { FitAddon } from 'xterm-addon-fit';
import 'xterm/css/xterm.css';
import HomeIcon from '@mui/icons-material/Home';
import { useNavigate } from 'react-router-dom';

const Discovery = () => {
  const [subnets, setSubnets] = useState<string>('');
  const [isDiscovering, setIsDiscovering] = useState<boolean>(false);
  const [lastDiscoveryTime, setLastDiscoveryTime] = useState<string | null>(
    localStorage.getItem('lastDiscoveryTime')
  );
  const terminalRef = useRef<HTMLDivElement>(null);
  const terminal = useRef<Terminal | null>(null);
  const fitAddon = useRef<FitAddon | null>(null);
  const navigate = useNavigate();

  useEffect(() => {
    if (terminalRef.current) {
      terminal.current = new Terminal({
        theme: {
          background: '#333',
        },
      });
      fitAddon.current = new FitAddon();
      terminal.current.loadAddon(fitAddon.current);
      terminal.current.open(terminalRef.current);
      fitAddon.current.fit();
    }

    return () => {
      terminal.current?.dispose();
    };
  }, []);

  useEffect(() => {
    if (isDiscovering) {
      const eventSource = createSSEConnection('https://172.16.10.222:8000/api/logs', (data) => {
        terminal.current?.writeln(data);
        if (data.includes("=== Fin de ejecución del script de descubrimiento ===")) {
          setIsDiscovering(false);
          const discoveryTime = new Date().toLocaleString();
          setLastDiscoveryTime(discoveryTime);
          localStorage.setItem('lastDiscoveryTime', discoveryTime);
          eventSource.close();
        }
      });

      return () => {
        eventSource.close();
      };
    }
  }, [isDiscovering]);

  const handleDiscovery = async () => {
    if (!subnets.trim()) {
      alert('Por favor, ingrese las subredes (ejemplo: 192.168.1.0/24, 10.1.100.0/24)');
      return;
    }
    setIsDiscovering(true);
    terminal.current?.clear();
    terminal.current?.writeln('Iniciando descubrimiento...');
    try {
      await startDiscovery(subnets.split(','));
    } catch (error) {
      terminal.current?.writeln('Error al iniciar el descubrimiento');
      setIsDiscovering(false);
    }
  };

  const handleHomeClick = () => {
    navigate('/dashboard');
  };

  return (
    <Box p={3} sx={{ backgroundColor: 'black', color: 'white', height: '100%', display: 'flex', flexDirection: 'column' }}>
      <Box display="flex" justifyContent="space-between" alignItems="center" sx={{ flexShrink: 0 }}>
        <Typography variant="body1" sx={{ color: 'white' }}>Descubrimiento de Dispositivos</Typography>
        <Box display="flex" alignItems="center">
          <Button
            variant="contained"
            color="primary"
            onClick={handleDiscovery}
            disabled={isDiscovering}
            sx={{ backgroundColor: '#1976d2', height: '40px', marginLeft: '16px' }}
          >
            Iniciar Descubrimiento
          </Button>
          <HomeIcon sx={{ color: 'white', cursor: 'pointer', marginLeft: '16px' }} onClick={handleHomeClick} />
        </Box>
      </Box>
      <TextField
        fullWidth
        label="Subredes"
        placeholder="Ingrese las subredes, ej: 192.168.1.0/24, 10.1.100.0/24"
        value={subnets}
        onChange={(e) => setSubnets(e.target.value)}
        margin="normal"
        sx={{ backgroundColor: '#333', borderRadius: '4px', height: '40px', color: 'white' }}
        InputLabelProps={{ style: { color: 'white' } }}
        InputProps={{ style: { color: 'white' } }}
      />
      {isDiscovering && <LinearProgress />}
      <Box mt={2} p={2} bgcolor="#333" borderRadius={4} overflow="hidden" sx={{ flexGrow: 1 }}>
        <div ref={terminalRef} style={{ height: '100%', width: '100%' }} />
      </Box>
      <Typography variant="body2" sx={{ color: 'white', mt: 2, flexShrink: 0 }}>
        Último descubrimiento: {lastDiscoveryTime || 'N/A'}
      </Typography>
    </Box>
  );
};

export default Discovery;
EOL

# Crear el archivo src/services/sse.ts
cat <<EOL > src/services/sse.ts
export const createSSEConnection = (url: string, onMessage: (data: any) => void) => {
  const eventSource = new EventSource(url);

  eventSource.onmessage = (event) => {
    onMessage(event.data);
  };

  eventSource.onerror = (error) => {
    console.error('SSE error:', error);
    eventSource.close();
  };

  return eventSource;
};
EOL

# Crear el archivo src/components/UsersManagement.tsx
cat <<EOL > src/components/UsersManagement.tsx
import React from 'react';

const UsersManagement = () => {
  return (
    <div>
      <h1>Gestión de Usuarios y Perfiles</h1>
      {/* Placeholder para la gestión de usuarios y perfiles */}
    </div>
  );
};

export default UsersManagement;
EOL
